"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevel = exports.logger = exports.Logger = exports.createLogger = exports.defaultOptions = exports.options = exports.printers = exports.parsers = exports.languages = exports.plugin = void 0;
const pug_lexer_1 = __importDefault(require("pug-lexer"));
const logger_1 = require("./logger");
const options_1 = require("./options");
const converge_1 = require("./options/converge");
const printer_1 = require("./printer");
exports.plugin = {
    languages: [
        {
            name: 'Pug',
            parsers: ['pug'],
            tmScope: 'text.jade',
            aceMode: 'jade',
            codemirrorMode: 'pug',
            codemirrorMimeType: 'text/x-pug',
            extensions: ['.jade', '.pug'],
            linguistLanguageId: 179,
            vscodeLanguageIds: ['jade', 'pug'],
        },
    ],
    parsers: {
        pug: {
            parse(text, parsers, options) {
                logger_1.logger.debug('[parsers:pug:parse]:', { text });
                let trimmedAndAlignedContent = text.replace(/^\s*\n/, '');
                const contentIndentation = /^\s*/.exec(trimmedAndAlignedContent);
                if (contentIndentation?.[0]) {
                    const contentIndentationRegex = new RegExp(`(^|\\n)${contentIndentation[0]}`, 'g');
                    trimmedAndAlignedContent = trimmedAndAlignedContent.replace(contentIndentationRegex, '$1');
                }
                const content = trimmedAndAlignedContent;
                const tokens = (0, pug_lexer_1.default)(content);
                return { content, tokens };
            },
            astFormat: 'pug-ast',
            hasPragma(text) {
                return (text.startsWith('//- @prettier\n') || text.startsWith('//- @format\n'));
            },
            locStart(node) {
                logger_1.logger.debug('[parsers:pug:locStart]:', { node });
                return 0;
            },
            locEnd(node) {
                logger_1.logger.debug('[parsers:pug:locEnd]:', { node });
                return 0;
            },
            preprocess(text, options) {
                logger_1.logger.debug('[parsers:pug:preprocess]:', { text });
                return text;
            },
        },
    },
    printers: {
        'pug-ast': {
            print(path, options, print) {
                const entry = path.stack[0];
                const { content, tokens } = entry;
                const pugOptions = (0, converge_1.convergeOptions)(options);
                const printer = new printer_1.PugPrinter(content, tokens, pugOptions);
                const result = printer.build();
                logger_1.logger.debug('[printers:pug-ast:print]:', result);
                return result;
            },
            embed(path, print, textToDoc, options) {
                return null;
            },
            insertPragma(text) {
                return `//- @prettier\n${text}`;
            },
        },
    },
    options: options_1.options,
    defaultOptions: {},
};
exports.languages = exports.plugin.languages;
exports.parsers = exports.plugin.parsers;
exports.printers = exports.plugin.printers;
exports.options = exports.plugin.options;
exports.defaultOptions = exports.plugin.defaultOptions;
var logger_2 = require("./logger");
Object.defineProperty(exports, "createLogger", { enumerable: true, get: function () { return logger_2.createLogger; } });
Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_2.Logger; } });
Object.defineProperty(exports, "logger", { enumerable: true, get: function () { return logger_2.logger; } });
Object.defineProperty(exports, "LogLevel", { enumerable: true, get: function () { return logger_2.LogLevel; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBYUEsMERBQTRCO0FBQzVCLHFDQUFrQztBQUVsQyx1Q0FBa0Q7QUFDbEQsaURBQXFEO0FBRXJELHVDQUF1QztBQVMxQixRQUFBLE1BQU0sR0FBVztJQUM1QixTQUFTLEVBQUU7UUFDVDtZQUNFLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ2hCLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLE9BQU8sRUFBRSxNQUFNO1lBQ2YsY0FBYyxFQUFFLEtBQUs7WUFDckIsa0JBQWtCLEVBQUUsWUFBWTtZQUNoQyxVQUFVLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQzdCLGtCQUFrQixFQUFFLEdBQUc7WUFDdkIsaUJBQWlCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1NBQ25DO0tBQ0Y7SUFFRCxPQUFPLEVBQUU7UUFDUCxHQUFHLEVBQUU7WUFDSCxLQUFLLENBQ0gsSUFBWSxFQUNaLE9BQXlDLEVBQ3pDLE9BQXNCO2dCQUV0QixlQUFNLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFFL0MsSUFBSSx3QkFBd0IsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDbEUsTUFBTSxrQkFBa0IsR0FBMkIsTUFBTSxDQUFDLElBQUksQ0FDNUQsd0JBQXdCLENBQ3pCLENBQUM7Z0JBQ0YsSUFBSSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUMzQixNQUFNLHVCQUF1QixHQUFXLElBQUksTUFBTSxDQUNoRCxVQUFVLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ2pDLEdBQUcsQ0FDSixDQUFDO29CQUNGLHdCQUF3QixHQUFHLHdCQUF3QixDQUFD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